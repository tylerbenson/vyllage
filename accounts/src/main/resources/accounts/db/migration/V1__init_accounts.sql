create schema if not exists ACCOUNTS;

create table if not exists ACCOUNTS.users(
  userid bigint generated by default as identity(start with 0) primary key,
  username varchar_ignorecase(50) not null,
  firstName varchar_ignorecase(50),
  middleName varchar_ignorecase(50),
  lastName varchar_ignorecase(50),
  enabled boolean not null,
  dateCreated timestamp not null,
  lastModified timestamp not null);

create table if not exists ACCOUNTS.personal_information(
	userid bigint not null primary key,
	graduationDate timestamp,
	emailUpdates varchar_ignorecase(15),
	phoneNumber varchar_ignorecase(20),
	constraint fk_personal_users foreign key(userid) references ACCOUNTS.users(userid));
  
create table if not exists ACCOUNTS.user_credentials(
  userid  bigint not null primary key,
  password varchar_ignorecase(60) not null,
  enabled boolean not null,
  expires timestamp,
  constraint fk_passwords_users foreign key(userid) references ACCOUNTS.users(userid));

create unique index ACCOUNTS.ix_username_password on ACCOUNTS.user_credentials (userid, password);
  
create table if not exists ACCOUNTS.authorities (
  username varchar_ignorecase(50) not null,
  authority varchar_ignorecase(50) not null,
  constraint fk_authorities_users foreign key(username) references ACCOUNTS.users(username));

create unique index ACCOUNTS.ix_auth_username on ACCOUNTS.authorities (username, authority);

create table if not exists ACCOUNTS.groups (
  id bigint generated by default as identity(start with 0) primary key,
  group_name varchar_ignorecase(50) not null);

create table if not exists ACCOUNTS.group_authorities (
  group_id bigint not null,
  authority varchar(50) not null,
  constraint fk_group_authorities_group foreign key(group_id) references ACCOUNTS.groups(id));

create table if not exists ACCOUNTS.group_members (
  id bigint generated by default as identity(start with 0) primary key,
  username varchar(50) not null,
  group_id bigint not null,
  constraint fk_group_members_group foreign key(group_id) references ACCOUNTS.groups(id));

create table if not exists ACCOUNTS.persistent_logins (
  username varchar(64) not null,
  series varchar(64) primary key,
  token varchar(64) not null,
  last_used timestamp not null);
  
