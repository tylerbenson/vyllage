// https://github.com/spring-io/sagan/blob/master/sagan-client/build.gradle

import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

task checkNPM {
    def skipNPM = System.env.GRADLE_SKIP_NPM == 'true'
    if(skipNPM) {
        System.setProperty("hasNPM", Boolean.toString(false))
        return
    }

    try {
        def result = project.exec {
            executable = "npm"
            ignoreExitValue = true
            args = ["-v"]
        }
        System.setProperty("hasNPM", Boolean.toString(result.exitValue == 0))
    } catch (org.gradle.process.internal.ExecException e) {
        System.setProperty("hasNPM", Boolean.toString(false))
    }
    println "hasNPM = " + System.getProperty("hasNPM")
}

task npmInstall(type:Exec) {
    // be Gradle-like and suppress boilerplate logging
    logging.captureStandardOutput LogLevel.INFO
    // but we do always want to see downloads in the log
    logging.captureStandardError LogLevel.LIFECYCLE
    inputs.files "package.json", "bower.json"
    outputs.dir "node_modules"
    commandLine 'npm', 'install'
}
npmInstall.shouldRunAfter clean
npmInstall.dependsOn checkNPM
npmInstall.onlyIf { "true".equals(System.getProperty('hasNPM')) }

task npmClean(dependsOn: npmInstall, type:Exec) {
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.INFO
    commandLine 'npm', 'run', 'clean'
}
clean.finalizedBy npmClean
npmClean.dependsOn checkNPM
npmClean.onlyIf { "true".equals(System.getProperty('hasNPM')) }

task npmBuild(dependsOn: npmInstall, type:Exec) {
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.INFO
    inputs.dir "src"
    inputs.file "gulpfile.js"
    outputs.dir "public"
    commandLine 'npm', 'run', 'build'
}
jar.dependsOn npmBuild
npmBuild.shouldRunAfter clean
npmBuild.dependsOn checkNPM
npmBuild.onlyIf { "true".equals(System.getProperty('hasNPM')) }

jar {
    from 'public'

    eachFile { details ->
        if(details.path.startsWith('META-INF')) {
            // ignore
        } else if(details.path.endsWith('.html') && !details.path.contains('facebook')) {
            details.path = 'templates/' + details.path
        } else {
            details.path = 'static/' + details.path
        }
    }
    // Jar contains duplicate empty folders, see Gradle issue:
    // http://issues.gradle.org/browse/GRADLE-1830
    // so we need to set includeEmptyDirs to false
    includeEmptyDirs = false
}
jar.shouldRunAfter clean


task httpd(dependsOn: npmInstall, type:Exec) {
    commandLine 'npm', 'run', 'httpd'
}
httpd.dependsOn checkNPM
httpd.onlyIf { "true".equals(System.getProperty('hasNPM')) }
