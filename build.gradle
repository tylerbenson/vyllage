import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

def vJavaLang = '1.8'
def gradleDir = "${rootProject.rootDir}/gradle"
ext.javascriptProjects = [ project(':assets') ]
ext.javaProjects = [ project(':accounts'), project(':documents'), project(':site'), project(':connections'), project(':email'), project(':user-common'), project(':togglz'), project(':util') , project(':oauth-provider') ]
ext.bootProjects = [ project(':accounts'), project(':documents'), project(':site'), project(':connections') , project(':oauth-provider')  ]
ext.dbProjects = [ project(':accounts'), project(':documents'), project(':togglz') ]

wrapper.gradleVersion = '2.5'

buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.flywaydb:flyway-gradle-plugin:3.1'
        classpath 'com.h2database:h2:1.4.185'
        classpath 'org.jooq:jooq-codegen:3.5.0'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
		classpath 'com.palantir:jacoco-coverage:0.3.0'
        classpath 'com.google.guava:guava:18.0' // Used by palantir jacoco-coverage but not properly declared.
    }
}

repositories {
    mavenCentral()
}

configure(subprojects) {
    apply plugin: 'eclipse'
}

configure(rootProject) {
    //apply from: 'gradle/gitMetadata.gradle'
}


configure(javaProjects) {
    apply plugin: 'java'
	apply plugin: 'com.palantir.jacoco-coverage'
    apply plugin: 'jacoco'
    apply plugin: 'findbugs'


    jacoco {
        toolVersion = "0.7.4.201502262128"
        reportsDir = file("$buildDir/reports/jacoco")
    }

	jacocoCoverage {
		// Enforce minimum code coverage of 50% for every Java file.
		fileThreshold 0.5
        fileThreshold 0.001, BRANCH
        fileThreshold 0.001, CLASS
        fileThreshold 0.001, COMPLEXITY
        fileThreshold 0.001, INSTRUCTION
        fileThreshold 0.001, LINE
        fileThreshold 0.001, METHOD
        fileThreshold 0.0 // Override all above to pass check for now.

		// Whitelist files named MyClass.java from coverage requirements.
		//fileThreshold 0.0, "MyClass.java"
	}

    findbugs {
        ignoreFailures = false
        //effort = "max"
        reportLevel = "medium"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
     }

    def slf4j = '1.7.12'
    def lombok = '1.16.4'
    def newrelic = '3.+'
    def junit = '4.12'
    def hamcrest = '1.3'
    def mockito = '1.10.19'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4j"
        compile "org.projectlombok:lombok:$lombok"
        compile "com.newrelic.agent.java:newrelic-api:$newrelic"

        testCompile "junit:junit:$junit"
        testCompile "org.hamcrest:hamcrest-library:$hamcrest"
        testCompile "org.mockito:mockito-core:$mockito"
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's classpath.
    eclipseClasspath.dependsOn testClasses

    eclipse {
        classpath {
             containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
             containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    test {
        minHeapSize = "256m"
        maxHeapSize = "512m"
        // Set PROJECT_HOME env variable to the root. This allows to register an additional
        // resource handler location and serve static resources directly from the template module during dev.
        // See ClientResourcesConfig
        jvmArgs "-DPROJECT_HOME=${rootProject.rootDir}"
    }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'

    //apply from: "$gradleDir/writeGitPropertiesFile.gradle"

    //bootRun.dependsOn writeGitPropertiesFile
    springBoot.backupSource = false

    version = "0.0.1-SNAPSHOT" //commitId

    def profile = (project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active'] != null) ?
        project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active'] : ""

    applicationDefaultJvmArgs = [
            // Set PROJECT_HOME env variable to the root. This allows to register an additional
            // resource handler location and serve static resources directly from the template module during dev.
            // See ClientResourcesConfig
            "-DPROJECT_HOME=${rootProject.rootDir}",
            "-Dspring.profiles.active=${profile}"
            //,"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999"
    ]
}

configure(dbProjects) {

    dependencies {
        compile 'com.h2database:h2:1.3.176'
        compile 'org.postgresql:postgresql:9.4-1201-jdbc41'
        compile 'org.flywaydb:flyway-core:3.1'
        compile 'org.jooq:jooq:3.5.0'
    }
    apply plugin: 'flyway'

    flyway {
        url = "jdbc:h2:$buildDir/db/local"
        user = 'sa'
        password = ''
        schemas = ["${project.name.toUpperCase()}"]
        locations = ["classpath:${project.name}/db/h2/migration"]
    }

    flywayMigrate.inputs.dir 'src/main/resources/${project.name}/db/'
    flywayMigrate.outputs.dir "$buildDir/db"

    project.afterEvaluate {
        flywayClean.dependsOn -= testClasses
        flywayMigrate.dependsOn = [
            processResources,
            processTestResources,
            verifySQLScripts
        ]
    }

    apply plugin: 'nu.studer.jooq'

    jooq {
        h2(sourceSets.main) {
            jdbc {
                driver = 'org.h2.Driver'
                url = "jdbc:h2:$buildDir/db/local"
                user = 'sa'
                password = ''
                schema = project.name.toUpperCase()
            }
            generator {
                target {
                    packageName = "${project.name}.domain"
                }
            }
        }
    }

    generateH2JooqSchemaSource.inputs.dir "$buildDir/db"
    generateH2JooqSchemaSource.outputs.dir "$buildDir/generated-src"
    generateH2JooqSchemaSource.dependsOn flywayMigrate


    task verifySQLScripts() {
        FileTree tree = fileTree("src/main/resources/${project.name}/db/pg/migration/").include('**/*')
        tree.each {File file ->
            assert file.name.matches(~/^V([0-9])([A-Za-z0-9_]).*/) && file.name.endsWith(".sql")
        }

    }

    //https://stackoverflow.com/questions/18136038/manage-multiple-database-with-the-flyway-migrations-gradle-plugin/18142219#18142219

    task circlePgTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
        extension = new org.flywaydb.gradle.FlywayExtension()
        extension.driver = "org.postgresql.Driver"
        extension.schemas = ["${project.name.toUpperCase()}"]
        extension.locations = ["classpath:${project.name}/db/pg/migration"]
    //    extension.sqlMigrationPrefix = "V"
    //    extension.initOnMigrate = true
    //    extension.outOfOrder = true
        extension.user = 'ubuntu'
        extension.password = ''
        extension.url = 'jdbc:postgresql://localhost:5432/circle_test'
    }

    task solanoPgtest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
        extension = new org.flywaydb.gradle.FlywayExtension()
        extension.driver = "org.postgresql.Driver"
        extension.schemas = ["${project.name.toUpperCase()}"]
        extension.locations = ["classpath:${project.name}/db/pg/migration"]
    //    extension.sqlMigrationPrefix = "V"
    //    extension.initOnMigrate = true
    //    extension.outOfOrder = true
        extension.user = System.getenv("TDDIUM_DB_USER")
        extension.password = System.getenv("TDDIUM_DB_PASSWORD")
        extension.url = 'jdbc:postgresql://' + System.getenv('TDDIUM_DB_PG_HOST') + ':' + System.getenv('TDDIUM_DB_PG_PORT') + '/' + System.getenv("TDDIUM_DB_NAME")
    }
}

task stage(dependsOn: [':site:build'])
