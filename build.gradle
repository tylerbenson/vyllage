def vJavaLang = '1.8'
def gradleDir = "${rootProject.rootDir}/gradle"
ext.javascriptProjects = [ project(':assets') ]
ext.javaProjects = [ project(':accounts'), project(':documents'), project(':site'), project(':connections') ]
ext.bootProjects = [ project(':accounts'), project(':documents'), project(':site'), project(':connections') ]
ext.dbProjects = [ project(':accounts'), project(':documents'), project(':connections') ]

wrapper.gradleVersion = '2.1'

buildscript {
    ext {
        springBootVersion = '1.1.8.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

        classpath 'org.flywaydb:flyway-gradle-plugin:3.1'
        classpath 'com.h2database:h2:1.4.185'
        classpath 'org.jooq:jooq-codegen:3.5.0'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
    }
}

repositories {
    mavenCentral()
}

configure(subprojects) {
    apply plugin: 'eclipse'
}

configure(rootProject) {
    apply from: 'gradle/gitMetadata.gradle'
}

configure(javaProjects) {
    apply plugin: 'java'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        compile 'org.projectlombok:lombok:1.14.8'
        compile 'com.newrelic.agent.java:newrelic-api:3.+'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's classpath.
    eclipseClasspath.dependsOn testClasses

    eclipse {
        classpath {
             containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
             containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    test {
        // Set PROJECT_HOME env variable to the root. This allows to register an additional
        // resource handler location and serve static resources directly from the template module during dev.
        // See ClientResourcesConfig
        jvmArgs "-DPROJECT_HOME=${rootProject.rootDir}"
    }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'
    apply from: "$gradleDir/integTest.gradle"
    apply from: "$gradleDir/deploy.gradle"
    //apply from: "$gradleDir/writeGitPropertiesFile.gradle"

    springBoot.backupSource = false
    //bootRun.dependsOn writeGitPropertiesFile

    applicationDefaultJvmArgs = [
            // Set PROJECT_HOME env variable to the root. This allows to register an additional
            // resource handler location and serve static resources directly from the template module during dev.
            // See ClientResourcesConfig
            "-DPROJECT_HOME=${rootProject.rootDir}",
			"-Dspring.profiles.active=${project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active']}"

    ]
}

configure(dbProjects) {

    dependencies {
        compile 'com.h2database:h2'
		compile 'org.postgresql:postgresql:9.4-1201-jdbc41'
        compile 'org.flywaydb:flyway-core:3.1'
        compile 'org.jooq:jooq:3.5.0'
    }
    apply plugin: 'flyway'

    flyway {
        url = "jdbc:h2:$buildDir/db/local"
        user = 'sa'
        password = ''
        schemas = ["${project.name.toUpperCase()}"]
        locations = ["classpath:${project.name}/db/h2/migration"]
    }

    flywayMigrate.inputs.dir 'src/main/resources/${project.name}/db/'
    flywayMigrate.outputs.dir "$buildDir/db"

    project.afterEvaluate {
        flywayClean.dependsOn -= testClasses
        flywayMigrate.dependsOn = [
            processResources,
            processTestResources
        ]
    }

    apply plugin: 'nu.studer.jooq'

    jooq {
        h2(sourceSets.main) {
            jdbc {
                driver = 'org.h2.Driver'
                url = "jdbc:h2:$buildDir/db/local"
                user = 'sa'
                password = ''
                schema = project.name.toUpperCase()
            }
            generator {
                target {
                    packageName = "${project.name}.domain"
                }
            }
        }
    }

    generateH2JooqSchemaSource.inputs.dir "$buildDir/db"
    generateH2JooqSchemaSource.outputs.dir "$buildDir/generated-src"
    generateH2JooqSchemaSource.dependsOn flywayMigrate
}

task stage(dependsOn: [':site:build'])
