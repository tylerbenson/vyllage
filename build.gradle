import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

def vJavaLang = '1.8'
def gradleDir = "${rootProject.rootDir}/gradle"
ext.javascriptProjects = [ project(':assets') ]
ext.javaProjects = [ project(':accounts'), project(':documents'), project(':site'), project(':connections'), project(':email'), project(':user-common'), project(':togglz'), project(':util') , project(':oauth-provider') ]
ext.bootProjects = [ project(':accounts'), project(':documents'), project(':site'), project(':connections') , project(':oauth-provider')  ]
ext.dbProjects = [ project(':accounts'), project(':documents'), project(':togglz') ]

wrapper.gradleVersion = '2.5'

buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.flywaydb:flyway-gradle-plugin:3.1'
        classpath 'com.h2database:h2:1.4.185'
        classpath 'org.jooq:jooq-codegen:3.5.0'
        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
        classpath 'com.palantir:jacoco-coverage:0.3.0'
        classpath 'com.google.guava:guava:18.0' // Used by palantir jacoco-coverage but not properly declared.
        classpath 'com.diffplug.gradle.spotless:spotless:1.1'
    }
}

repositories {
    mavenCentral()
}

configure(subprojects) {
    apply plugin: 'eclipse'
}

configure(rootProject) {
    //apply from: 'gradle/gitMetadata.gradle'
}


configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'com.palantir.jacoco-coverage'
    apply plugin: 'jacoco'
    apply plugin: 'findbugs'


    jacoco {
        toolVersion = "0.7.4.201502262128"
        reportsDir = file("$buildDir/reports/jacoco")
    }

    jacocoCoverage {
        // Enforce minimum code coverage.
        // https://github.com/palantir/gradle-jacoco-coverage
        reportThreshold 0.25, BRANCH, "accounts"
        reportThreshold 0.6, CLASS, "accounts"
        reportThreshold 0.29, COMPLEXITY, "accounts"
        reportThreshold 0.4, INSTRUCTION, "accounts"
        reportThreshold 0.4, LINE, "accounts"
        reportThreshold 0.32, METHOD, "accounts"

        reportThreshold 0.0, BRANCH, "connections"
        reportThreshold 0.3, CLASS, "connections"
        reportThreshold 0.05, COMPLEXITY, "connections"
        reportThreshold 0.037, INSTRUCTION, "connections"
        reportThreshold 0.06, LINE, "connections"
        reportThreshold 0.07, METHOD, "connections"

        reportThreshold 0.42, BRANCH, "documents"
        reportThreshold 0.85, CLASS, "documents"
        reportThreshold 0.48, COMPLEXITY, "documents"
        reportThreshold 0.57, INSTRUCTION, "documents"
        reportThreshold 0.56, LINE, "documents"
        reportThreshold 0.519, METHOD, "documents"

        packageThreshold 0.20, ~"accounts/.*"
        packageThreshold 0.0, ~"connections/.*" // :-(
        packageThreshold 0.20, ~"documents/.*"

        // Whitelist files that currently have 0 coverage.
        packageThreshold 0.0, ~"accounts/controller.*"
        packageThreshold 0.0, "accounts/model"
        packageThreshold 0.0, ~"accounts/model/account.*"
        packageThreshold 0.0, ~"accounts/model/link.*"
        packageThreshold 0.0, ~"accounts/domain/tables/records.*"
        packageThreshold 0.0, ~"accounts/config.*"

        packageThreshold 0.0, "documents/database"
        packageThreshold 0.0, "documents/files/pdf"

        packageThreshold 0.0, "site/controllers"

        // Sadly, these don't even have any tests.
        packageThreshold 0.20, ~"email/.*"
        packageThreshold 0.20, ~"oauth-provider/.*"
        packageThreshold 0.20, ~"site/.*"
        packageThreshold 0.20, ~"togglz/.*"
        packageThreshold 0.20, ~"user-common/.*"
        packageThreshold 0.20, ~"util/.*"
    }

    findbugs {
        ignoreFailures = false
        effort = "max"
        reportLevel = "medium"
        //https://code.google.com/p/findbugs/source/browse/findbugs/src/java/edu/umd/cs/findbugs/detect
        visitors = ["FindSqlInjection", "SwitchFallthrough",  "FindUselessObjects", "BadSyntaxForRegularExpression", "BadUseOfReturnValue"
        , "BooleanReturnNull", "FindLocalSelfAssignment2", "FindNullDeref",  "FindRefComparison", "FindReturnRef", "FindUselessControlFlow"
        , "HugeSharedStringConstants", "DuplicateBranches", "DroppedException", "DumbMethodInvocations"]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    apply plugin: 'com.diffplug.gradle.spotless'
    spotless {
        java {
            target 'src/**/*.java'

            trimTrailingWhitespace()
            indentWithTabs()
            endWithNewline()

            importOrderFile "${rootProject.rootDir}/gradle/vyllage.eclipse.importorder" // An import ordering file, exported from Eclipse
            //eclipseFormatFile "${rootProject.rootDir}/gradle/vyllage.eclipseformat.xml"  // XML file dumped out by the Eclipse formatter

            // You can also tweak the formatting with custom regexes or functions, such as:
            // Eclipse formatter puts excess whitespace after lambda blocks
            //    funcThatTakesLambdas(x -> {} , y -> {} )  // what Eclipse does
            //    funcThatTakesLambdas(x -> {}, y -> {})    // what I wish Eclipse did
            //custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

            custom 'Comment fix', { it.replace('\t*', '\t *').replaceAll('\n\\*', '\n *') }
        }
        format 'misc', {
            target '**/.gitignore', '**/*.gradle' //, '**/*.md', '**/*.sh'
            indentWithSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
        lineEndings = com.diffplug.gradle.spotless.LineEnding.UNIX
    }

    def slf4j = '1.7.12'
    def lombok = '1.16.4'
    def newrelic = '3.+'
    def junit = '4.12'
    def hamcrest = '1.3'
    def mockito = '1.10.19'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4j"
        compile "org.projectlombok:lombok:$lombok"
        compile "com.newrelic.agent.java:newrelic-api:$newrelic"

        testCompile "junit:junit:$junit"
        testCompile "org.hamcrest:hamcrest-library:$hamcrest"
        testCompile "org.mockito:mockito-core:$mockito"
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's classpath.
    eclipseClasspath.dependsOn testClasses

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    test {
        minHeapSize = "256m"
        maxHeapSize = "512m"
        // Set PROJECT_HOME env variable to the root. This allows to register an additional
        // resource handler location and serve static resources directly from the template module during dev.
        // See ClientResourcesConfig
        jvmArgs "-DPROJECT_HOME=${rootProject.rootDir}"
    }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'

    //apply from: "$gradleDir/writeGitPropertiesFile.gradle"

    //bootRun.dependsOn writeGitPropertiesFile
    springBoot.backupSource = false

    version = "0.0.1-SNAPSHOT" //commitId

    def profile = (project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active'] != null) ?
        project.gradle.startParameter.systemPropertiesArgs['spring.profiles.active'] : ""

    applicationDefaultJvmArgs = [
            // Set PROJECT_HOME env variable to the root. This allows to register an additional
            // resource handler location and serve static resources directly from the template module during dev.
            // See ClientResourcesConfig
            "-DPROJECT_HOME=${rootProject.rootDir}",
            "-Dspring.profiles.active=${profile}"
            //,"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999"
    ]
}

configure(dbProjects) {

    dependencies {
        compile 'com.h2database:h2:1.3.176'
        compile 'org.postgresql:postgresql:9.4-1201-jdbc41'
        compile 'org.flywaydb:flyway-core:3.1'
        compile 'org.jooq:jooq:3.5.0'
    }
    apply plugin: 'flyway'

    flyway {
        url = "jdbc:h2:$buildDir/db/local"
        user = 'sa'
        password = ''
        schemas = ["${project.name.toUpperCase()}"]
        locations = ["classpath:${project.name}/db/h2/migration"]
    }

    flywayMigrate.inputs.dir 'src/main/resources/${project.name}/db/'
    flywayMigrate.outputs.dir "$buildDir/db"

    project.afterEvaluate {
        flywayClean.dependsOn -= testClasses
        flywayMigrate.dependsOn = [
            processResources,
            processTestResources,
            verifySQLScripts
        ]
    }

    apply plugin: 'nu.studer.jooq'

    jooq {
        h2(sourceSets.main) {
            jdbc {
                driver = 'org.h2.Driver'
                url = "jdbc:h2:$buildDir/db/local"
                user = 'sa'
                password = ''
                schema = project.name.toUpperCase()
            }
            generator {
                target {
                    packageName = "${project.name}.domain"
                }
            }
        }
    }

    generateH2JooqSchemaSource.inputs.dir "$buildDir/db"
    generateH2JooqSchemaSource.outputs.dir "$buildDir/generated-src"
    generateH2JooqSchemaSource.dependsOn flywayMigrate


    task verifySQLScripts() {
        FileTree tree = fileTree("src/main/resources/${project.name}/db/pg/migration/").include('**/*')
        tree.each {File file ->
            assert file.name.matches(~/^V([0-9])([A-Za-z0-9_]).*/) && file.name.endsWith(".sql")
        }

    }

    //https://stackoverflow.com/questions/18136038/manage-multiple-database-with-the-flyway-migrations-gradle-plugin/18142219#18142219

    task circlePgTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
        extension = new org.flywaydb.gradle.FlywayExtension()
        extension.driver = "org.postgresql.Driver"
        extension.schemas = ["${project.name.toUpperCase()}"]
        extension.locations = ["classpath:${project.name}/db/pg/migration"]
    //    extension.sqlMigrationPrefix = "V"
    //    extension.initOnMigrate = true
    //    extension.outOfOrder = true
        extension.user = 'ubuntu'
        extension.password = ''
        extension.url = 'jdbc:postgresql://localhost:5432/circle_test'
    }

    task solanoPgtest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
        extension = new org.flywaydb.gradle.FlywayExtension()
        extension.driver = "org.postgresql.Driver"
        extension.schemas = ["${project.name.toUpperCase()}"]
        extension.locations = ["classpath:${project.name}/db/pg/migration"]
    //    extension.sqlMigrationPrefix = "V"
    //    extension.initOnMigrate = true
    //    extension.outOfOrder = true
        extension.user = System.getenv("TDDIUM_DB_USER")
        extension.password = System.getenv("TDDIUM_DB_PASSWORD")
        extension.url = 'jdbc:postgresql://' + System.getenv('TDDIUM_DB_PG_HOST') + ':' + System.getenv('TDDIUM_DB_PG_PORT') + '/' + System.getenv("TDDIUM_DB_NAME")
    }
}

task stage(dependsOn: [':site:build'])
