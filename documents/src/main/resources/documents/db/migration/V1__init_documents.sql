create schema if not exists DOCUMENTS;
  	
create table if not exists DOCUMENTS.documents(
	id bigint generated by default as identity(start with 0) primary key,
	userId bigint not null,
	tagline varchar_ignorecase(50),
  	visibility boolean not null,
  	dateCreated timestamp not null,
  	lastModified timestamp not null);
  	
create table if not exists DOCUMENTS.document_sections(
	id bigint not null AUTO_INCREMENT,
	sectionVersion bigint not null,
	documentId bigint not null,
  	position bigint not null,
  	jsonDocument varchar(4096) not null,
  	dateCreated timestamp not null,
  	lastModified timestamp not null,
  	PRIMARY KEY (id, sectionVersion),
  	constraint fk_section_documents foreign key(documentId) references DOCUMENTS.documents(id) on delete cascade);
  	
create table if not exists DOCUMENTS.comments(
	comment_id bigint generated by default as identity(start with 0) primary key,
	user_id bigint not null,
	section_id bigint not null,
	section_version bigint not null,
	other_comment_Id bigint,
	comment_text varchar(2048),
  	last_modified timestamp not null,
  	constraint fk_comments_document_sections foreign key(section_id, section_version) references DOCUMENTS.document_sections(id, sectionVersion) on delete cascade) ;
  	
create table if not exists DOCUMENTS.suggestions(
	suggestion_id bigint generated by default as identity(start with 0) primary key,
	user_id bigint not null,
	section_id bigint not null,
	section_version bigint not null,
	json_document varchar(4096) not null,
 	last_modified timestamp not null,
	constraint fk_suggestions_document_sections foreign key(section_id, section_version) references DOCUMENTS.document_sections(id, sectionVersion) on delete cascade);


