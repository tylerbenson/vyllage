//def checkTasks = []
//gradle.rootProject.allprojects { project ->
//    checkTasks.addAll(project.tasks.findAll { it.name == 'build' })
//}
//
//def final TARGET_SPACE = 'space'
//def final PRODUCTION_SPACE = 'production'
//def final STAGING_SPACE = 'staging'
//
//def siteProject = project(':sagan-site')
//def indexerProject = project(':sagan-indexer')
//
//// Gather information about the build environment. Is it a Travis CI build?
//def travisBranch = System.getenv().get("TRAVIS_BRANCH")
//def hasSecureEnv = Boolean.valueOf(System.getenv().get("TRAVIS_SECURE_ENV_VARS"))
//def isPullRequest = Boolean.valueOf(System.getenv().get("TRAVIS_PULL_REQUEST"))
//def isTravisBuild = travisBranch != null
//def isDeployableTravisBuild = isTravisBuild && (!isPullRequest || hasSecureEnv)
//
//task deploy(dependsOn: [ build, rootProject.gitMetadata ]) {
//    description = 'Deploys the project to a Cloud Foundry space (specified with -Pspace=<targetspace>)'
//    mustRunAfter checkTasks
//
//    // User may specify an explicit target space any time, e.g. ./gradlew deploy -Pspace=production
//    // Otherwise, target space will be determined by branch name (assuming we are in a Travis CI build).
//    // If no branch is matched, no space is set, and deployment will be skipped entirely.
//    if (!project.hasProperty(TARGET_SPACE) && travisBranch != null) {
//        if (travisBranch =~ '^master$') {
//            project.ext.setProperty(TARGET_SPACE, PRODUCTION_SPACE)
//        }
//        else if (travisBranch =~ '^stage-.*') {
//            project.ext.setProperty(TARGET_SPACE, STAGING_SPACE)
//        }
//    }
//
//    // Always proceed with deployment if it is a local build. If we're on Travis CI, only
//    // deploy if the secure environment vars are available (i.e. this is not a pull request
//    // from a fork) and we're on a branch intended for production deployment.
//    if (!isTravisBuild || (isDeployableTravisBuild && project.hasProperty(TARGET_SPACE))) {
//        dependsOn 'cfLogin'
//
//        // the site gets blue-green deployment
//        if (project.name == siteProject.name)
//            dependsOn 'cfDeploy', 'cfSwapDeployed'
//
//        // the indexer just needs to be pushed
//        else if (project.name == indexerProject.name)
//            dependsOn 'cfPush'
//
//        else
//            throw new IllegalArgumentException('Unknown project ${project.name}')
//    }
//    else {
//        onlyIf { false }
//    }
//}
//
//def saganEnvScript = file("${System.getProperty("user.home")}/.gradle/sagan-env.gradle")
//if (saganEnvScript.exists()) {
//    logger.info("Applying environment settings from ${saganEnvScript.path} to ${project.name}")
//    apply from: saganEnvScript
//}
//
//apply plugin: 'cloudfoundry'
//
//cloudfoundry {
//    target = "https://api.run.pivotal.io"
//    organization = "spring.io"
//
//    file = file("${jar.archivePath}")
//    host = "$application"
//    domain = 'cfapps.io'
//    memory = 2048
//    healthCheckTimeout = 180
//    buildpack = 'https://github.com/cloudfoundry/java-buildpack/'
//}
//
//if (project.name == siteProject.name) {
//    cloudfoundry {
//        application = 'sagan' // instead of 'sagan-site'
//        instances = 3
//        variants = ['-blue', '-green']
//    }
//}
//if (project.name == indexerProject.name) {
//    cloudfoundry {
//        instances = 1
//    }
//}
//
//// These deployment properties can be set on the command line with "-P" options, in "gradle.properties",
//// or in "~/.gradle/sagan-env.gradle". All are required if the respective 'cfLogin' / 'deploy' tasks
//// have been invoked.
//
//def reqDeployVars = [
//    'adminPassword', 'elasticsearchEndpoint', 'githubClientId',
//    'githubClientSecret', 'githubAccessToken', 'webhookAccessToken'
//]
//
//gradle.taskGraph.whenReady {
//    if (isTravisBuild && !isDeployableTravisBuild) {
//        // Skip deployment altogether when building pull requests from forks under Travis CI
//        project.tasks.findByPath("deploy").onlyIf { false }
//    }
//    else {
//        // We should have everything we need in order to deploy. Check for required credentials
//        // and populate cloudfoundry environment variables.
//        if (gradle.taskGraph.hasTask(":${siteProject.name}:cfLogin")
//                || gradle.taskGraph.hasTask(":${indexerProject.name}:cfLogin")) {
//            def missingVars = []
//
//            if (!project.hasProperty('cfUsername')) {
//                missingVars << 'cfUsername'
//            }
//            if (!project.hasProperty('cfPassword')) {
//                missingVars << 'cfPassword'
//            }
//            if (missingVars.size() > 0) {
//                throw new InvalidUserDataException(
//                        "Missing required variable(s) for the 'cfLogin' task: ${missingVars}. " +
//                                "Specify them with -Pkey=value or in ${saganEnvScript}");
//            }
//        }
//
//        if (gradle.taskGraph.hasTask(":${siteProject.name}:${deploy.name}")
//                || gradle.taskGraph.hasTask(":${indexerProject.name}:${deploy.name}")) {
//            def missingVars = []
//            reqDeployVars.each { var ->
//                if (!project.hasProperty(var)) {
//                    missingVars << var
//                }
//            }
//            if (missingVars.size() > 0) {
//                throw new InvalidUserDataException(
//                        "Missing required variable(s) for the 'deploy' task: ${missingVars}. " +
//                                "Specify them with -Pkey=value or in ${saganEnvScript}");
//            }
//
//            // All required env vars are present. Populate the cloudfoundry environment with them.
//            cloudfoundry {
//                env << [
//                        ADMIN_PASSWORD: adminPassword,
//                        ELASTICSEARCH_ENDPOINT: elasticsearchEndpoint,
//                ]
//            }
//
//            if (project.name == siteProject.name) {
//                cloudfoundry {
//                    env << [
//                            GITHUB_CLIENT_ID: githubClientId,
//                            GITHUB_CLIENT_SECRET: githubClientSecret,
//                            GITHUB_ACCESS_TOKEN: githubAccessToken,
//                            WEBHOOK_ACCESS_TOKEN: webhookAccessToken
//                    ]
//                }
//            }
//        }
//    }
//}
//
//// Routes can be specified by combining the 'host'/'hosts' field with the 'domain' field, or by the 'uri'/'uris' field.
//// Values for 'host'/'hosts' are modified on cfDeploy to add '-blue' or '-green' as appropriate, and are applied on
//// cfPush and cfDeploy. Values for 'uri'/'uris' are never modified with '-blue' or '-green', and are only applied by
//// cfPush and cfSwapDeployed. Using both forms of specifying routes gives control over which routes are decorated and
//// which routes are undecorated.
//
//if (project.hasProperty(TARGET_SPACE)) {
//    cloudfoundry {
//        space = project.getProperty(TARGET_SPACE)
//        host = "$application-${space}"
//
//        env << [
//            SPRING_PROFILES_ACTIVE: "${space}",
//            NEW_RELIC_APP_NAME: { "sagan${currentVariant};sagan" },
//            ELASTICSEARCH_INDEX: "sagan-${space}"
//        ]
//
//        services {
//            'sagan-db' {
//                label = 'elephantsql'
//                plan = (space == PRODUCTION_SPACE ? 'panda' : 'hippo')
//            }
//            'newrelic' {
//                label = 'newrelic'
//                plan = 'standard'
//            }
//        }
//    }
//
//    if (project.name == siteProject.name) {
//        cloudfoundry {
//            uris = (space == PRODUCTION_SPACE ? [ "spring.io", "www.spring.io" ] : [ "${space}.spring.io" ])
//        }
//    }
//}

