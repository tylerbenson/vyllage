def vJavaLang = '1.8'
def gradleDir = "${rootProject.rootDir}/gradle"
wrapper.gradleVersion = '2.5'

repositories {
    mavenCentral()
	maven {
		url "https://bbprepo.blackboard.com/content/repositories/releases/"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'



def slf4j = '1.7.12'
def lombok = '1.16.4'
def newrelic = '3.+'
def junit = '4.12'
def hamcrest = '1.3'
def mockito = '1.10.19'

targetCompatibility = vJavaLang
sourceCompatibility = vJavaLang

repositories {
    mavenCentral()
}

dependencies {
    compile "org.slf4j:slf4j-api:$slf4j"
    compile "org.projectlombok:lombok:$lombok"
    compile "com.newrelic.agent.java:newrelic-api:$newrelic"
	compile "blackboard.platform:bb-platform:9.1.201410.160373"
	compile "blackboard.platform:bb-taglibs:9.1.201410.160373"
	compile 'javax.servlet:javax.servlet-api:3.1.0'
	compile 'commons-httpclient:commons-httpclient:3.1'
	compile 'org.jdom:jdom:1.1.3'
	compile 'net.oauth.core:oauth-provider:20100527'
	compile 'com.google.code.gson:gson:2.3.1'
//	compile 'commons-logging:commons-logging:1.2'

    compile "junit:junit:$junit"
    compile "org.hamcrest:hamcrest-library:$hamcrest"
    compile "org.mockito:mockito-core:$mockito"
}

configurations.all {
    // replaced with jcl-over-slf4j
//    exclude group: 'commons-logging', module: 'commons-logging'
    // replaced with log4j-over-slf4j
    //exclude group: 'log4j', module: 'log4j'

    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()


        def spring = '4.1.7.RELEASE'
        def jackson = '2.5.4'

        // force certain versions of dependencies (including transitive)
        //  *append new forced modules:
        // TODO: extract common values to single definition.
        force 'org.slf4j:slf4j-api:1.7.12'
        force 'javax.activation:activation:1.1.1'
        force "org.springframework:spring-webmvc:$spring"
        force "org.springframework:spring-web:$spring"
        force "org.springframework:spring-beans:$spring"
        force "org.springframework:spring-core:$spring"
        force "org.springframework:spring-aop:$spring"
        force "org.springframework:spring-context:$spring"
        force "org.springframework:spring-expression:$spring"
        force "org.springframework:spring-tx:$spring"
        force 'org.springframework.security:spring-security-core:3.2.7.RELEASE'
        force 'org.springframework.security:spring-security-config:3.2.7.RELEASE'
        force 'org.springframework.security:spring-security-web:3.2.7.RELEASE'
        force "com.fasterxml.jackson.core:jackson-annotations:$jackson"
        force "com.fasterxml.jackson.core:jackson-databind:$jackson"
        force "com.fasterxml.jackson.core:jackson-core:$jackson"
        force "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson"
        force 'org.thymeleaf:thymeleaf:2.1.4.RELEASE'
        force 'org.apache.commons:commons-lang3:3.3.2'
        force 'org.hamcrest:hamcrest-core:1.3'
        force "org.springframework:spring-test:$spring"
    }
}


// Ensure that all Gradle-compiled classes are available to Eclipse's classpath.
eclipseClasspath.dependsOn testClasses

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

test {
    minHeapSize = "256m"
    maxHeapSize = "512m"
    // Set PROJECT_HOME env variable to the root. This allows to register an additional
    // resource handler location and serve static resources directly from the template module during dev.
    // See ClientResourcesConfig
    jvmArgs "-DPROJECT_HOME=${rootProject.rootDir}"
}

task stage(dependsOn: [':site:build'])
