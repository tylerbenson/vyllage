/*
    basiclti - Building Block to provide support for Basic LTI
    Copyright (C) 2015  Stephen P Vickers

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    Contact: stephen@spvsoftwareproducts.com
*/
var osc_hierarchy_tree =
{
  /**
   * Initializes the institutional hierarchy tree to be displayed inside a palette.
   *
   * @param paletteIdStr
   *        The identifier to the palette that houses the hierarchy tree.
   * @param hierarchyTreeContainerIdStr
   *        The identifier to give to the DIV element that will be created that will hold the hierarchy tree.
   * @param unusedPaletteContentsContainerIdStr
   *        The identifier to the UL element auto-generated by the palette tag that will be removed.
   * @param nodeIdStr
   *        The external identifier string for the currently selected node.
   * @param isMenuExpandable
   *        Expand the tree palette if the string in the tree is too long
   */
  initializeTree : function ( paletteIdStr, hierarchyTreeContainerIdStr, unusedPaletteContentsContainerIdStr, nodeIdStr, isMenuExpandable )
  {
    dynamictree.Images.MINUS =      '/images/ci/icons/nlstree/arrowdown.gif';
    dynamictree.Images.MINUS_LAST = '/images/ci/icons/nlstree/arrowdown.gif';
    dynamictree.Images.PLUS =       '/images/ci/icons/nlstree/arrowright.gif';
    dynamictree.Images.PLUS_LAST =  '/images/ci/icons/nlstree/arrowright.gif';

    // get the palette tag auto-generated UL element - the default palette contents container
    var unusedULElement = $( unusedPaletteContentsContainerIdStr );

    // get its visibility; it may be hidden if the palette is collapsed
    var showTree = unusedULElement.visible();

    // get the parent element of the auto-generated UL element
    var paletteContentElement = unusedULElement.up();

    // delete this because it's an UL element and the tree generates a UL element already
    unusedULElement.remove();

    // create a new DIV container with the same ID to hold the hierarchy tree
    var hierarchyTreeDivContainer = new Element( "div", { id: hierarchyTreeContainerIdStr } ).addClassName( 'treeContainer' )
                                                                                             .addClassName( 'treeScrollable' );

    // set the visibility
    if( showTree )
    {
      hierarchyTreeDivContainer.show();
    }
    else
    {
      hierarchyTreeDivContainer.hide();
    }

    // add this DIV to the contents-DIV of the palette
    paletteContentElement.appendChild( hierarchyTreeDivContainer );

    /* set this palette contents container to be the active container in the palette js object so that
     * palette collapse/expand will work
     */
    page.PaletteController.setActivePaletteContentsContainer( paletteIdStr, hierarchyTreeDivContainer );

    // initialize the hierarchy tree to the created DIV container
    new dynamictree.Tree( hierarchyTreeDivContainer,
                          null,
                          '/webapps/blackboard/execute/institutionalHierarchy/nodeTreeViewGenerator',
                          'nodeId=' + nodeIdStr,
                          true,
                          true,
                          dynamictree.StoreScope.PERMANENT,
                          isMenuExpandable );
    this.updateTree();
  },
  updateTree : function() {
    var el = document.getElementById('nodeNavigationTreeContainer');
    if (!el.innerHTML) {
      setTimeout('osc_hierarchy_tree.updateTree()', 100);
    } else {
      osc_treeSize = 0;
      osc_checkTree();
    }
  }
};
